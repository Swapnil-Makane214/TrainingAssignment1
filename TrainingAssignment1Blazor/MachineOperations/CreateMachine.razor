@page "/createmachine"
<h3>CreateMachine</h3>
@using System.Collections.Generic
@using System.Text.Json
@using TrainingAssignment1Blazor.Models

<h3>Add New Machine</h3>

<form @onsubmit="SubmitForm">
    <div>
        <label for="name">Name:</label>
        <input type="text" id="name" @bind="machineName" required/>
    </div>

    <h5>Assets</h5>
    <button class="btn btn-primary" type="button" @onclick="AddNewFields">Add New</button>

    @if (assets.Count > 0)
    { 
        @foreach (var asset in assets)
        {
            <div>
                <input type="text" @bind="asset.assetName" placeholder="Enter Asset Name" required></input>
                <input type="text" @bind="asset.series" placeholder="Enter Series" required></input>
                <button class="btn-close" type="button" @onclick="()=>removeAsset(asset)"></button>
            </div>
        }
    } 
   <br />
    <button class="btn btn-primary" type="submit">Submit</button>
</form>

@code {
    private string? machineName;
    private List<Asset> assets = new List<Asset>();

    private void AddNewFields()
    {
        assets.Add(new Asset());
        Console.WriteLine(assets.Count());
    }

    private void SubmitForm()
    {
        Machine machine = new Machine();
        machine.machineName = machineName;
        machine.assetsUsed = assets;
        var url = "https://localhost:7107/api/MachineAsset/CreateMachine/";
        var client = new HttpClient();
        var data = JsonSerializer.Serialize(machine);
        var content = new StringContent(data, System.Text.Encoding.UTF8,"application/json");
        var response=client.PostAsync(url,content).Result;
        Console.WriteLine(response.StatusCode);
        if(response.IsSuccessStatusCode)
        {
            Console.WriteLine("Created successfully");
        }
    }

    private void removeAsset(Asset asset)
    {
        Console.WriteLine(asset.assetName);
        // assets.RemoveAt(index);
        assets.Remove(asset);
    }
}

